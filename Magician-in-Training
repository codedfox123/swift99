Answer: 
func getCard(at index: Int, from stack: [Int]) -> Int {
return stack [index] 
}

func setCard(at index: Int, in stack: [Int], to newCard: Int) -> [Int] {
if index >= stack.count || index < 0 {
        return stack
    }
    var newStack = stack
    newStack[index] = newCard
    return newStack
}

func insert(_ newCard: Int, atTopOf stack: [Int]) -> [Int] {
return stack+[newCard]    
}

func removeCard(at index: Int, from stack: [Int]) -> [Int] {
guard (0..<stack.count).contains(index) else {return stack}
    var copy = stack
    copy.remove(at:index)
    return copy
}

func removeTopCard(_ stack: [Int]) -> [Int] {
return stack.dropLast(1)
    }

func insert(_ newCard: Int, atBottomOf stack: [Int]) -> [Int] {
  var newStack = stack
    newStack.insert(newCard, at: 0)
    return newStack
}

func removeBottomCard(_ stack: [Int]) -> [Int] {
  return Array(stack.dropFirst(1))
}

func checkSizeOfStack(_ stack: [Int], _ size: Int) -> Bool {
 size == stack.count
}

func evenCardCount(_ stack: [Int]) -> Int {
 var evenCount = 0
    for int in stack { if int % 2 == 0 {evenCount += 1}}
    return evenCount
  
}
